@series
{
	[reference      "JsonSerialiser"]
	[name			"Intro to D metaprogramming - Creating a JSON serialiser"]
	[description	"A series of blog posts that cover how to create a basic JSON serialiser in D,"
					"while teaching several different aspects of D's metaprogramming, such as templates;"
					"template arguments; function contracts; static if; static foreach; mixins; and more."
	]
	[tags			"dlang"
					"tutorial"
					"metaprogramming"
	]
	[status			"finished"]

	[post "/blogs/JsonSerialiser/post1.md"]
	[post "/blogs/JsonSerialiser/post1_1.md"]
	[post "/blogs/JsonSerialiser/post2.md"]
	[post "/blogs/JsonSerialiser/post3.md"]
	[post "/blogs/JsonSerialiser/post4.md"]
	[post "/blogs/JsonSerialiser/post5.md"]
	[post "/blogs/JsonSerialiser/post6.md"]
}

@series
{
    [reference      "MetaprogrammingInD"]
    [name           "Metaprogramming in D"]
    [description    "D boasts one of the strongest, most flexible array of metaprogramming features amongst most existing languages,"
					"which allows it the ability to perform use-cases such as automating boilerplate without the need"
					"of external tooling; generating compiler optimised D code from a regex at compile-time; and running functions at compile-time"
					"to generate values/more code. All done using the language's built-in features with little compromise."
    ]
    [tags           "dlang"
                    "metaprogramming"
    ]
	[status			"WIP"]

    [post "/blogs/MetaprogrammingInD/01_simple_text_template.md"]
}

@series
{
	[reference		"JcliNews"]
	[name			"JCLI News"]
	[description	"Any misc news about JCLI, such as changelogs."]
	[tags			"jcli"
					"dlang"
					"library"
	]
	[status			"jcli is still being supported"]

	[post "/blogs/JcliNews/v0.5.0.md"]
	[post "/blogs/JcliNews/v0.6.0.md"]
	[post "/blogs/JcliNews/v0.7.0.md"]
	[post "/blogs/JcliNews/v0.8.0.md"]
	[post "/blogs/JcliNews/v0.9.0.md"]
	[post "/blogs/JcliNews/v0.10.0.md"]
	[post "/blogs/JcliNews/v0.11.0.md"]
	[post "/blogs/JcliNews/v0.12.0.md"]
}