@model BlogIndexViewModel
@{
    ViewData["NavItem"] = "My Programming Blog";
    ViewData["Title"] = (Model.TagFilter == null) ? "Blog" : $"Blogs for {Model.TagFilter}";

    var seoExtraDescription = Model.Series
                                   .Select(s => $"{s.Series.Reference} which covers {s.Series.Tags.Aggregate((a, b) => a+" "+b)}")
                                   .Aggregate((a, b) => $"{a}, and {b}");
    ViewData["SeoDescription"] =
        Model.TagFilter == null
        ? $"A collection of all of my blog series, such as {seoExtraDescription}"
        : $"A collection of all of my blog series that are tagged with {Model.TagFilter}, such as {seoExtraDescription}";

    string DATE_FORMAT = "dd/MM/yyyy";
}

<section class="series">
    @foreach(var series in Model.Series)
    {
        <div class="wrapper">
            <article>
                <h1>@series.Series.Name</h1>
                <small>Created on @series.Posts.First().DateCreated.ToString(DATE_FORMAT)</small>
                <small>Updated on @series.Posts.OrderBy(p => p.DateUpdated).Last().DateUpdated.ToString(DATE_FORMAT)</small>
                <p>@series.Series.Description</p>

                <ol>
                    @for (int i = 0; i < series.Posts.Count; i ++)
                    {
                        var post = series.Posts[i];
                        <li>
                            <a href="BlogPost/@series.GetPostSeoPath(i)">
                                @post.Title
                            </a>
                        </li>
                    }
                </ol>
                <div class="tags">
                    <i class="fa fa-tags"></i>
                    @for(int i = 0; i < series.Series.Tags.Count; i++)
                    {
                        var tag = series.Series.Tags.Skip(i).First();
                        var needsComma = (i != series.Series.Tags.Count - 1);
                        <small>
                            <a asp-action="Blog" asp-route-tag="@tag">
                                @(tag + (needsComma ? "," : ""))
                            </a>
                        </small>
                    }
                </div>
            </article>
        </div>
    }
</section>