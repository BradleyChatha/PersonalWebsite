@model BlogIndexViewModel
@{
    ViewData["NavItem"] = "Blog";
    ViewData["Title"] = (Model.TagFilter == null) ? "Blog" : $"Blogs for {Model.TagFilter}";

    var seoExtraDescription = Model.Series
                                   .Select(s => $"{s.Series.Reference} which covers {s.Series.Tags.Aggregate((a, b) => a+" "+b)}")
                                   .Aggregate((a, b) => $"{a}, and {b}");
    ViewData["SeoDescription"] =
        Model.TagFilter == null
        ? $"A collection of all of my blog series, such as {seoExtraDescription}"
        : $"A collection of all of my blog series that are tagged with {Model.TagFilter}, such as {seoExtraDescription}";
    ViewData["SeoCanonical"] = "Blog";

    string DATE_FORMAT = "dd/MM/yyyy";
}

@section SchemaOrg {
    <script type="application/ld+json">
        {
            "@@context": "https://schema.org/",
            "@@type": "Blog",
            "about": "programming",
            "abstract": "My personal blog covering different topics of software and web development, including tutorials.",
            "accessMode": "textual",
            "accessModeSufficient": ["textual"],
            "accountablePerson": {
                "@@type": "Person",
                "name": "Bradley Chatha"
            },
            "audience": {
                "@@type": "Audience",
                "audienceType": ["programmers", "software developers", "web developers", "dlang"]
            },
            "author": {
                "@@type": "Person",
                "name": "Bradley Chatha"
            },
            "inLanguage": "en",
            "isAccessibleForFree": "true",
            "isFamilyFriendly": "true",
            "keywords": "@Model.Series.SelectMany(s => s.Series.Tags).Aggregate((a,b) => a+","+b),serialise,template,constraint,mixin,static if",
            "sameAs": [
                "https://bradley.chatha.dev/Blog"
            ]
        }
    </script>

    <meta property="og:url"             content="https://bradley.chatha.dev/Blog"/>
    <meta property="og:title"           content="Programming and tutorial blog."/>
    <meta property="og:description"     content="@ViewData["SeoDescription"]"/>
    <meta property="og:image"           content="https://bradley.chatha.dev/favicon.ico"/>
    <meta property="og:type"            content="website"/>

    @if(Model.TagFilter != null)
    {
        <meta name="robots" content="noindex"/>
    }
}

<section class="series">
    <h1>My programming and teaching blog</h1>
    @foreach(var series in Model.Series)
    {
        <div class="wrapper">
            <article>
                <h2>@series.Series.Name</h2>
                <small>
                    Created on @series.Posts.First().DateCreated.ToString(DATE_FORMAT)
                    |
                    Updated on @series.Posts.OrderBy(p => p.DateUpdated).Last().DateUpdated.ToString(DATE_FORMAT)
                </small>
                <small></small>
                <small>Status: @series.Series.Status</small>
                <p>@series.Series.Description</p>

                <ol>
                    @for (int i = 0; i < series.Posts.Count; i ++)
                    {
                        var post = series.Posts[i];
                        <li>
                            <a href="BlogPost/@series.GetPostSeoPath(i)">
                                @post.Title
                            </a>
                        </li>
                    }
                </ol>
                <div class="tags">
                    <i class="fa fa-tags"></i>
                    @for(int i = 0; i < series.Series.Tags.Count; i++)
                    {
                        var tag = series.Series.Tags.Skip(i).First();
                        var needsComma = (i != series.Series.Tags.Count - 1);
                        <small>
                            <a asp-action="Blog" asp-route-tag="@tag">
                                @(tag + (needsComma ? "," : ""))
                            </a>
                        </small>
                    }
                </div>
            </article>
        </div>
    }
</section>