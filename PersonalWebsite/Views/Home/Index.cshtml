@{
    ViewData["Title"] = "Index";
    ViewData["NavLinkActive"] = "linkHome";

    var Languages = new List<(string Name, string[] Experiences)>
    {
        ("C#", new string[]
        {
            "6 years hobbyist experience",
            "1 year professional experience",
            "Working knowledge of most language features",
            "Working, but incomplete knowledge of the standard library",
            "This website is powered off of ASP Core, a C# framework"
        }),
        ("D", new string[]
        {
            "5 years hobbyist experience",
            "Complete(~90%+) knowledge of the language",
            "My most comfortable language",
            "The deployment tool for this website was written in D",
            "The deployment tool is using a CLI framework I also wrote"
        }),
        ("C++", new string[]
        {
            "5 years on/off experience",
            "Working knowledge of the language... I think (it's C++)",
            "Will only resort to using this language if I have to",
            "Am willing to grit my teeth and dive into the more advanced parts of this language if needed",
            "This language is a complete mess, change my mind"
        }),
        ("Python", new string[]
        {
            "4 years on/off experience",
            "Enough knowledge of the language to get by",
            "As with everything, I'm willing to learn and research new parts of the language I haven't explored"
        }),
        ("JS & Typescript", new string[]
        {
            "4 months semi-professional experience",
            "Learning features on a need-to-know basis, so very inept",
            "I am not a front end developer"
        }),
        ("CSS", new string[]
        {
            "[Refer to 'JS & Typescript']",
            "Completely reliant on frameworks such as Bootstrap and Fomantic UI"
        }),
        ("x86 ASM (NASM dialect)", new string[]
        {
            "I only know a handful of instructions",
            "I understand the basics needed for raw ASM coding (registers, stack, calling conventions, stack frames, memory addressing, etc.)",
            "Mostly including this to show I have some ASM experience"
        }),
        ("SQL", new string[]
        {
            "2 years experience with MS-SQL",
            "1 months experience with Postgres",
            "Mostly rely on Entity Framework Core rather than make my own SQL statements",
            "Not much (if any) experience with most features that databases can offer"
        })
    };
}

<section class="ui lighter home center aligned attached segment">
    <h2 class="ui header">About me</h2>
    <section class="container">
        <p>
            My name is Bradley, I'm a 20 year old software developer.
        </p>
        <p>
            I first found programming when I was 11 (2011), and properly started to get into it when I was 13 (2013) and haven't stopped since.
        </p>
        <p>
            I am currently a student at Aim Educational Ltd, primarily doing computer science, software development, and electronics.
            Even though I'm formally a student, my work there is more akin to work experience than purely education, and so I count my experiences there as professional/semi-professional.
        </p>
        <p>
            I'm comfortable with most non-niche fields of software development, excluding front-end development. I am not a front-end dev. This website is also not mobile friendly.
        </p>
    </section>
</section>
<section class="ui dark home center aligned attached segment">
    <h2 class="ui header">Skillset</h2>
    <section class="ui horizontal darkish home center aligned segments">

        <section class="ui segment">
            <div class="ui dividing sub header">Languages</div>

            @foreach(var language in Languages)
            {
                <section class="ui centered home card">
                    <div class="content">
                        <div class="header">@language.Name</div>
                    </div>
                    <div class="content">
                        <div class="home accented description">
                            @foreach(var experience in language.Experiences)
                            {
                                <p>@experience</p>
                            }
                        </div>
                    </div>
                </section>
            }
        </section>

        <section class="ui segment">
            <div class="ui dividing sub header">Projects</div>
            <section class="ui centered home card">
                <div class="content">
                    <div class="home description">
                        <p>
                            My main area of interest is development of either the backend of websites/software, or general tools, whether
                            they be tools to sell or internal tools to aid the company.
                        </p>
                        <p>
                            While this website, as well as my <a href="/Home/Project?view=%2FViews%2FProjects%2FFarmMaster.cshtml">FarmMaster</a> 
                            project show that I'm capable of basic web design, I would like to make it
                            clear that I am <strong>not</strong> a front end developer, and am not interested as working as one.
                        </p>
                        <p>
                            If you head over to my <a asp-action="Projects">Projects</a> page, you can see I have a wide variety of (mostly abandoned) projects, such as:
                        </p>
                        <ul>
                            <li><a>AimCLITool</a> - A website deployment tool which this website was deployed with.</li>
                            <li><a href="/Home/Project?view=%2FViews%2FProjects%2FFarmMaster.cshtml">FarmMaster</a> - A website for farm management, being developed for Aim Educational Ltd.</li>
                        </ul>
                        <p>
                            Clicking onto any of the projects will go into more specific details about the code behind them.
                        </p>
                    </div>
                </div>
            </section>

            <div class="ui dividing sub header">Knowledge</div>
            <section class="ui centered home card">
                <div class="content">
                    <div class="home description">
                        <p>
                            I have a broad knowledge of computers and programming.
                        </p>
                        <p>
                            From a low level standpoint, I have an understanding of:
                        </p>
                        <ul>
                            <li>
                                How a computer manages memory, including the stack, paging, segmentation, fragmentation of memory, virtual memory, and the costs included with memory allocation.
                            </li>
                            <ul>
                                <li>I understand some basics about allocators, such as block allocators, and bitmap bookkeeping of memory blocks.</li>
                                <li>I have an understanding of Garbage Collectors, and some of their techniques/variations ('stop the world', generational, sweeping, etc.)</li>
                                <li>I have an understanding of how Linked Lists, Dynamic arrays, and HashMaps work and manipulate memory. Including having also implemented all 3.</li>
                                <li>I am capable of manual memory management, but there is a 99% chance I'll mess up an add a memory leak (it's really, really hard to get right).</li>
                                <li>I understand how to use smart pointers, including ownership rules (Unique and Shared), and hidden costs such as reference counting, with some knowledge on how to avoid them.</li>
                                <li>Finally, I have implemented several binary-based storage formats, which includes taking endianess into account, and also shows that I understand how data types are layed out in memory.</li>
                            </ul>

                            <li>The general pipeline of how a language goes from code to an executable (for compiled languages).</li>
                            <ul>
                                <li>I understand what a compiler, assembler, and linker are, and what jobs they perform.</li>
                                <li>I understand what object files are.</li>
                                <li>I'm familiar with a few build processes/tools, such as Dub, Make, and Meson. I'm intentionally not including IDEs such as Visual Studio, as they hide most of the process.</li>
                                <li>I'm familiar with the several phases of compilation (lexical analysis, syntax analysis, code optimisation which may or may not include intermediate languages, code generation, transpiling, etc.)</li>
                                <li>I have written various toy languages, which all include a recursive top-descent parser. My later ones include an AST. Virtually all of them compile into a bytecode language, which is then ran in a custom virtual machine.</li>
                            </ul>

                            <li>Code optimisation</li>
                            <ul>
                                <li>I understand what Big O notation is, and how to determine the Big O complexity of code.</li>
                                <li>
                                    I understand the costs associated with various aspects of memory managment, and the different approaches that are possible and are appropriate
                                    for certain situations. (memory pooling, reserving large chunks of memory before large concat operations, minimise allocation inside of loops, memory reuse, etc.)
                                </li>
                                <li>
                                    I understand that Garbage Collectors can have significant perfomance impacts if not catered for. Most of the time though this is a sign that someone's
                                    memory management is awful anyway.
                                </li>
                                <li>I understand high level abstractions can contain hidden costs, such as reference counting, virtual functions, and bounds checking.</li>
                                <li>I understand what CPU cache lines are, and how to design data structures to increase the chances of the data being put into a cache.</li>
                                <li>
                                    I understand some of the optimisations that a compiler may make (such as inlining, dead code and dead store optimisation, tail call, constant folding, vectorisation, etc.),
                                    and in some cases how to write code to specifically cater to the compiler's optimiser.
                                </li>
                            </ul>

                            <li>Graphical programming</li>
                            <ul>
                                <li>I have a novice understanding of OpenGL, including verticies, buffer objects, and shaders.</li>
                                <li>I have implemented a command-queue-based forward 2D renderer which can perform automatic sprite batching as well as automatic texture stitching.</li>
                                <li>Unfortunately my grasp of Mathematics in terms of geometry isn't great, so regretfully I can't explore the more advanced techniques of graphics programming.</li>
                            </ul>
                        </ul>

                        <p>From a high level standpoint, I have an understanding of:</p>
                        <ul>
                            <li>
                                Various programming paradigms, such as procedural; object oriented; functional, incl. purely functional; data driven;
                                event driven; generic (see: any amount of D code), and metaprogramming (again, see D).
                            </li>
                            <li>
                                I have a general idea of several development methodologies such as Agile, Extreme, Scrum, and waterfall, but I'm
                                likely going to need real world practice before I fully understand each one.
                            </li>
                            <li>
                                Abstractions such as classes, interfaces, polymorphism, closures, virtual functions, lambdas, and more
                                that I probably can't even think of.
                            </li>
                            <li>
                                Metaprogramming and reflection. I have <strong>extensive</strong> experience with metaprogramming, compile-time reflection, and template programming thanks to the D language, and
                                have a fair grasp of run-time reflection and generic programming using C#.
                            </li>
                        </ul>
                    </div>
                </div>
            </section>

            <div class="ui dividing sub header">Footnote</div>
            <section class="ui centered home card">
                <div class="content">
                    <div class="home description">
                        <p>
                            For all my 6 (technically 8) years of programming, I am almost entirely self taught.
                        </p>
                        <p>
                            When applied to my knowledge of something, "good enough" is something I'll never say to myself, as my motto in terms of
                            knowledge is "complacency is the devil". If I ever feel complacent in my knowledge of something, then I know I'll never strive
                            to better myself, which will eventually lead to me falling behind or run off of out-dated information.
                        </p>
                        <p>
                            I am capable of learning and researching new languages and technologies in relatively short amounts of time. For example,
                            I started learning ASP Core back in March for the <a href="/Home/Project?view=%2FViews%2FProjects%2FFarmMaster.cshtml">FarmMaster</a> project. 
                            Between then and now (4 months time span) I have
                            spent countless hours researching into ASP, rewriting code as I learn new techniques and patterns, have created a custom deployment tool
                            based on all of the knowledge I learned from doing it manually, and most importantly learning from the mistakes/bad designs I did early on.
                        </p>
                        <p>
                            I am comfortable with my code being criticised, and I have no humility when being taught by other people. An important part
                            of this is that I'm always unhappy with all code I write, so I can and am happy to see all of the flaws within any piece of code I write,
                            while also being happy to be told a different way to design it or how to fix it.
                        </p>
                        <p>
                            I've had the experience of watching two people code with me watching over the years, which looking back on things has made me realise
                            that this is was an important part of my growth as a programmer, as it allowed me to see things outside of my own train of thought, making
                            me more open minded and mindful of how I could program around certain problems.
                        </p>
                        <p>
                            Baseline is, I am self motivated; I am capable of self research and learning; I do not hold myself on a pedestal and will accept any flaw
                            pointed out in my code; I will try my best to always be caught up in whatever knowledge I need to have.
                        </p>
                        <p>
                            Finally, Javascript and C++ are the anti-thesis of fun.
                        </p>
                    </div>
                </div>
            </section>
        </section>
    </section>
</section>
<section class="ui lighter home center aligned attached segment">
    <br />
    <section class="ui centered cards">
        <a asp-action="Awards">
            <section class="ui card">
                <div class="ui centered image">
                    <img src="~/img/trophy.png" width="680" height="400" />
                </div>
                <div class="content">
                    <div class="header">Awards</div>
                </div>
            </section>
        </a>
    </section>
    <br />
</section>